import{o as e,c as i,d as n}from"./app.feb34482.js";const l='{"title":"开发指南","description":"","frontmatter":{},"headers":[{"level":2,"title":"核心模块 Core","slug":"核心模块-core"},{"level":2,"title":"前端 Frontend","slug":"前端-frontend"},{"level":3,"title":"前端文件结构","slug":"前端文件结构"},{"level":2,"title":"后端 Backend","slug":"后端-backend"},{"level":3,"title":"后端文件结构","slug":"后端文件结构"}],"relativePath":"develop/index.md","lastUpdated":1628772046027}',o={},a=n('<h1 id="开发指南"><a class="header-anchor" href="#开发指南" aria-hidden="true">#</a> 开发指南</h1><p>项目分为三个模块，core核心模块是C++编写的判题机，frontend是基于Vue2的前端，backend是基于Nodejs的后端。推荐使用“适用于Linux的Windows子系统”简称WSL的WSL2版本安装Ubuntu环境，配合Visual Studio Code以及其Remote WSL插件进行本地的跨平台开发。在配置好环境后使用git工具clone仓库，并在三个内执模块行<code>npm install</code>指令就可以配置好项目。三个模块的运行测试指令有所不同，可以参照对应目录下的package.json来查看运行与测试指令。</p><h2 id="核心模块-core"><a class="header-anchor" href="#核心模块-core" aria-hidden="true">#</a> 核心模块 Core</h2><p>Core 核心模块是一个判题机，它具有接受程序题代码题解、编译、运行和使用预先指定的输入输出与用户代码执行输出进行比对来进行判题，并记录用户程序运行占用系统资源情况的功能。在技术上，Core 核心模块使用基于<a href="https://github.com/nodejs/node-addon-api" target="_blank" rel="noopener noreferrer">node-addon-api</a>的Node Addon插件技术。核心模块是使用C++编写的，并使用node-gyp工具编译为“.node”格式的node插件，该插件可以直接被运行在Node.js上的Javascript代码引入并调用。进一步对平台进行开发需要到下列技术相关知识：</p><ul><li>JavaScript</li><li>Node.js</li><li>C/C++ Language</li><li>node-addon-api</li><li>Linux programming(有一本叫APUE的书可以参考)</li></ul><h2 id="前端-frontend"><a class="header-anchor" href="#前端-frontend" aria-hidden="true">#</a> 前端 Frontend</h2><p>Frontend是一个基于Vue和Vuetify框架的前端单页应用模块。Vue作为数据管理与模块化框架，Vuetify是一个基于我最喜欢的材料设计的UI框架。前端模块中使用了以下技术：</p><ul><li>ECMAScript 6(Promise, spread syntax...)</li><li>Vue 2</li><li>Vue Router</li><li>Vuex</li><li>Vue i18n</li><li>Vuetify 2</li><li>axios</li><li>markdown it</li><li>highlight.js</li><li>katex</li><li>Ace Editor</li></ul><h3 id="前端文件结构"><a class="header-anchor" href="#前端文件结构" aria-hidden="true">#</a> 前端文件结构</h3><div class="language-"><pre><code>frontend\n└───api       一个对axios的封装来做mock等功能 \n└───assets    静态文件\n└───components  进一步封装的ui组件\n└───locale    国际化i18n相关\n└───plugins   Vuetify, highlight.js, notify, markdown-it, Ace plugins\n└───router    Vue Router 路由\n└───store     Vuex 储存 \n└───style     全局样式. 颜色主题在plugins/theme.js里定义\n└───utils     一些用于验证或者其他用途的工具函数 \n└───views     主要的视图组件，是构成App.vue的模块，也是对components里ui组件的封装\n└───App.vue   主要的应用组件\n└───index.html  模板html \n└───index.js  入口文件\n</code></pre></div><h2 id="后端-backend"><a class="header-anchor" href="#后端-backend" aria-hidden="true">#</a> 后端 Backend</h2><p>后端是一个普通的基于Koa.js与MongoDB的Node.js程序。后端是负责主要系统逻辑和数据持久化的部分。它就像其他项目的后端那样对外提供一个RESTful API允许客户端（通常为前端）进行请求获取数据。它对内，在需要的时候会调用判题机插件进行判题。后端使用到了以下技术</p><ul><li>Koa</li><li>MongoDB</li><li>Mongoose（MongoDB的对象关系映射框架）</li><li>Winston</li></ul><h3 id="后端文件结构"><a class="header-anchor" href="#后端文件结构" aria-hidden="true">#</a> 后端文件结构</h3><div class="language-"><pre><code>backend\n└───config      后端配置。服务器、数据库、日志等\n└───core        存放判题机核心node模块\n└───db          数据库连接核心文件\n└───model       数据实体，定义Mongoose中Schema与Model的地方\n└───router      请求控制器，Koa路由位置\n└───security    安全相关\n└───util        系统常量、错误、字段验证等\n</code></pre></div>',15);o.render=function(n,l,o,d,r,t){return e(),i("div",null,[a])};export{l as __pageData,o as default};
