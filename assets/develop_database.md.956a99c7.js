import{o as n,c as s,a as o,b as a}from"./app.d15654db.js";const t='{"title":"数据库","description":"","frontmatter":{},"headers":[{"level":2,"title":"MongoDB","slug":"mongodb"},{"level":3,"title":"数据库和集合","slug":"数据库和集合"},{"level":3,"title":"文档 Document","slug":"文档-document"},{"level":2,"title":"MongoDB Compass","slug":"mongodb-compass"},{"level":2,"title":"Mongoose","slug":"mongoose"},{"level":3,"title":"快速入门","slug":"快速入门"}],"relativePath":"develop/database.md","lastUpdated":1628810427076}',e={},l=o("h1",{id:"数据库"},[o("a",{class:"header-anchor",href:"#数据库","aria-hidden":"true"},"#"),a(" 数据库")],-1),c=o("p",null,"Mirage使用NoSQL数据库MongoDB。",-1),p=o("h2",{id:"mongodb"},[o("a",{class:"header-anchor",href:"#mongodb","aria-hidden":"true"},"#"),a(" MongoDB")],-1),u=o("p",null,"MongoDB是一个文档型NoSQL数据库，其使用一种改良过的JSON格式也就是BSON格式，作为数据存储方式。就像SQL数据一样，它也包含数据库服务器（Server）与驱动（Driver）两个主要的部分。数据库服务器负责数据的存储与查询等，驱动为各种语言开发一套访问数据库服务器的API。",-1),i=o("h3",{id:"数据库和集合"},[o("a",{class:"header-anchor",href:"#数据库和集合","aria-hidden":"true"},"#"),a(" 数据库和集合")],-1),r=o("p",null,"MongoDB中储存的数据记录的单位是文档（Document），文档是以BSON格式存储的。相同类型的文档储存为集合（Collection），多个集合组成一个数据库（Database）。一个MongoDB实例可以有多个数据库。",-1),k=o("h3",{id:"文档-document"},[o("a",{class:"header-anchor",href:"#文档-document","aria-hidden":"true"},"#"),a(" 文档 Document")],-1),d=o("p",null,"一个文档可以类比为关系型数据库中的一行记录，文档由多个键值对组成。文档的格式是类似于JSON的BSON。",-1),g=o("div",{style:{"text-align":"center",margin:"20px"}},[o("img",{src:"/assets/document.c5eea892.svg",width:"550"})],-1),m=o("p",null,"文档的优势是：",-1),h=o("ul",null,[o("li",null,"文档的数据类型与许多编程语言的原生类型更加接近"),o("li",null,"内嵌文档和数组减少了很多浪费资源的多表join"),o("li",null,"自由的表定义可以很自然的支持多态等情况")],-1),M=o("p",null,"下面是一个文档的例子：",-1),b=o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"var"),a(" mydoc "),o("span",{class:"token operator"},"="),a(),o("span",{class:"token punctuation"},"{"),a("\n  _id"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token function"},"ObjectId"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},'"5099803df3f4948bd2f98391"'),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},","),a("\n  name"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token punctuation"},"{"),a(" first"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token string"},'"Alan"'),o("span",{class:"token punctuation"},","),a(" last"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token string"},'"Turing"'),a(),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},","),a("\n  birth"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token keyword"},"new"),a(),o("span",{class:"token class-name"},"Date"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'Jun 23, 1912'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},","),a("\n  death"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token keyword"},"new"),a(),o("span",{class:"token class-name"},"Date"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'Jun 07, 1954'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},","),a("\n  contribs"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token punctuation"},"["),a(),o("span",{class:"token string"},'"Turing machine"'),o("span",{class:"token punctuation"},","),a(),o("span",{class:"token string"},'"Turing test"'),o("span",{class:"token punctuation"},","),a(),o("span",{class:"token string"},'"Turingery"'),a(),o("span",{class:"token punctuation"},"]"),o("span",{class:"token punctuation"},","),a("\n  views "),o("span",{class:"token operator"},":"),a(),o("span",{class:"token function"},"NumberLong"),o("span",{class:"token punctuation"},"("),o("span",{class:"token number"},"1250000"),o("span",{class:"token punctuation"},")"),a("\n"),o("span",{class:"token punctuation"},"}"),a("\n")])])],-1),f=o("p",null,"上方文档每个键对应值的类型：",-1),B=o("ul",null,[o("li",null,[o("code",null,"_id"),a("是MongoDB会默认为每个文档创建的键，它的类型是MongoDB特有的"),o("code",null,"ObjectId")]),o("li",null,[o("code",null,"name"),a("的类型是内嵌文档，也就是说一个文档里可以有某个属性的值为另一个文档，这样就可以直接查到数据而非使用多表连接")]),o("li",null,[o("code",null,"birth"),a("和"),o("code",null,"death"),a("都是日期类型")]),o("li",null,[o("code",null,"contribs"),a("的类型是字符串数组")]),o("li",null,[o("code",null,"views"),a("的类型是"),o("code",null,"NumberLong ")])],-1),D=o("p",null,[a("文档内值的访问可以直接使用"),o("code",null,"."),a("来进行，例如：")],-1),v=o("ul",null,[o("li",null,[a("为了获取"),o("code",null,"_id"),a("可以使用"),o("code",null,"data._id")]),o("li",null,[a("为了获取"),o("code",null,"name"),a("内的"),o("code",null,"first"),a("可以使用"),o("code",null,"data.name.first")]),o("li",null,[a("为了获取"),o("code",null,"contribs"),a("的第三个元素可以使用"),o("code",null,"data.contribs.2")])],-1),S=o("p",null,"文档有限制大小，BSON文档最大16MB，但是建议大于2M时可以考虑将较大字段分出去。",-1),w=o("p",null,[a("BSON支持的文档内值类型可以参考MongoDB的官方文档："),o("a",{href:"https://docs.mongodb.com/manual/reference/bson-types/",target:"_blank",rel:"noopener noreferrer"},"https://docs.mongodb.com/manual/reference/bson-types/")],-1),y=o("h2",{id:"mongodb-compass"},[o("a",{class:"header-anchor",href:"#mongodb-compass","aria-hidden":"true"},"#"),a(" MongoDB Compass")],-1),N=o("p",null,[a("MongoDB Compass是MongoDB官方使用的数据库管理工具，方便用户使用图形界面对MongoDB数据进行查看和管理。"),o("a",{href:"https://docs.mongodb.com/compass/current/",target:"_blank",rel:"noopener noreferrer"},"官方文档")],-1),j=o("h2",{id:"mongoose"},[o("a",{class:"header-anchor",href:"#mongoose","aria-hidden":"true"},"#"),a(" Mongoose")],-1),O=o("p",null,"Mongoose是一个MongoDB的对象数据映射框架（ODM），虽然MongoDB的原生存储方式（BSON）已经十分接近JavaScript对象，但是仍有许多操作可以被简化。它管理数据之间的关系，提供数据验证，将MongoDB的对象形式转换为Node.js的对象形式。",-1),T=o("h3",{id:"快速入门"},[o("a",{class:"header-anchor",href:"#快速入门","aria-hidden":"true"},"#"),a(" 快速入门")],-1),I=o("p",null,"下面是Mongoose基本使用的例子，摘取自Mongoose的官方文档Quick Start",-1),J=o("h4",{id:"准备动作"},[o("a",{class:"header-anchor",href:"#准备动作","aria-hidden":"true"},"#"),a(" 准备动作")],-1),K=o("p",null,"首先要保证Node.js与MongoDB已经被正确的安装，然后使用npm安装Mongoose依赖。",-1),P=o("div",{class:"language-shell"},[o("pre",null,[o("code",null,[o("span",{class:"token function"},"npm"),a(),o("span",{class:"token function"},"install"),a(" --save mongoose\n")])])],-1),_=o("p",null,"如果我们想保存所有小猫到MongoDB里，首先要做的是在项目中引入Mongoose依赖，并告诉Mongoose如何连接本机的MongoDB服务器。",-1),C=o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"const"),a(" mongoose "),o("span",{class:"token operator"},"="),a(),o("span",{class:"token function"},"require"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'mongoose'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a("\nmongoose"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"connect"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'mongodb://localhost:27017/test'"),o("span",{class:"token punctuation"},","),a(),o("span",{class:"token punctuation"},"{"),a("useNewUrlParser"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token boolean"},"true"),o("span",{class:"token punctuation"},","),a(" useUnifiedTopology"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token boolean"},"true"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a("\n")])])],-1),L=o("p",null,"由于数据库连接是异步的，所以我们为连接数据库过程的各个事件绑定处理器，来获取连接状态。如果你不想在连接后进行操作，那这一步大可省略",-1),Q=o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"const"),a(" db "),o("span",{class:"token operator"},"="),a(" mongoose"),o("span",{class:"token punctuation"},"."),a("connection"),o("span",{class:"token punctuation"},";"),a("\ndb"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"on"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'error'"),o("span",{class:"token punctuation"},","),a(" console"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"error"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"bind"),o("span",{class:"token punctuation"},"("),a("console"),o("span",{class:"token punctuation"},","),a(),o("span",{class:"token string"},"'connection error:'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a("\ndb"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"once"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'open'"),o("span",{class:"token punctuation"},","),a(),o("span",{class:"token keyword"},"function"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),a(),o("span",{class:"token punctuation"},"{"),a("\n  "),o("span",{class:"token comment"},"// we're connected!"),a("\n"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a("\n")])])],-1),x=o("h4",{id:"操作数据"},[o("a",{class:"header-anchor",href:"#操作数据","aria-hidden":"true"},"#"),a(" 操作数据")],-1),U=o("p",null,"在Mongoose里，所有数据对象都是由Schema（一种类似于面向对象编程中接口的概念的东西）衍生而来。让我们定义一个Kitten小猫Schema。",-1),A=o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"const"),a(" kittySchema "),o("span",{class:"token operator"},"="),a(),o("span",{class:"token keyword"},"new"),a(),o("span",{class:"token class-name"},[a("mongoose"),o("span",{class:"token punctuation"},"."),a("Schema")]),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},"{"),a("\n  name"),o("span",{class:"token operator"},":"),a(" String"),o("span",{class:"token punctuation"},","),a("\n  color"),o("span",{class:"token operator"},":"),a(" String\n"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a("\n")])])],-1),q=o("div",{class:"tip custom-block"},[o("p",{class:"custom-block-title"},"TIP"),o("p",null,"更多关于Mongoose Schema的内容，请参考Mongoose的Schema、SchemaType文档。")],-1),z=o("p",null,"很明显，上面的小猫Schema具有name名字和color颜色两个属性，这将搭建MongoDB和JavaScript代码中对象的桥梁。然后我们在JavaScript代码中使用这个桥梁为模板，新建一个Model",-1),E=o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"const"),a(" Kitten "),o("span",{class:"token operator"},"="),a(" mongoose"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"model"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'Kitten'"),o("span",{class:"token punctuation"},","),a(" kittySchema"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a("\n")])])],-1),F=o("div",{class:"tip custom-block"},[o("p",{class:"custom-block-title"},"TIP"),o("p",null,"更多关于Mongoose Model的内容，请参考Mongoose的Model文档。")],-1),G=o("p",null,"Model类似于类的概念，我们接下来使用Model来创建真正具有数据的Document",-1),H=o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"const"),a(" bill "),o("span",{class:"token operator"},"="),a(),o("span",{class:"token keyword"},"new"),a(),o("span",{class:"token class-name"},"Kitten"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},"{"),a(" name"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token string"},"'Bill'"),o("span",{class:"token punctuation"},","),a(" color"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token string"},"'orange'"),a(),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a("\nconsole"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"log"),o("span",{class:"token punctuation"},"("),a("bill"),o("span",{class:"token punctuation"},"."),a("name"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a(),o("span",{class:"token comment"},"// 'Bill'"),a("\n")])])],-1),R=o("div",{class:"tip custom-block"},[o("p",{class:"custom-block-title"},"TIP"),o("p",null,"更多关于Mongoose Document的内容，请参考Mongoose的Document、Subdocument文档。")],-1),V=o("p",null,[a("此时，我们就可以调用"),o("code",null,"save()"),a("方法来保存我们的小猫Bill了。调用"),o("code",null,"save()"),a("方法将令Mongoose对MongoDB发出新建Kitten集合（Collection）指令并在该集合中写入一条Bill文档（Document）。"),o("br"),a(" 从Kitten集合（在MongoDB的集合，是在Mongoose里的Model）内查找Bill，我们可以使用Model上的"),o("code",null,"find()"),a("方法。")],-1),W=o("div",{class:"language-js"},[o("pre",null,[o("code",null,[a("Kitten"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"find"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},"{"),a(" name"),o("span",{class:"token operator"},":"),a(),o("span",{class:"token string"},"'Bill'"),a(),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},","),a(" callback"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),a("\n")])])],-1),X=o("div",{class:"tip custom-block"},[o("p",{class:"custom-block-title"},"TIP"),o("p",null,"更多关于Mongoose数据查询内容，请参考Mongoose的Queries文档。")],-1);e.render=function(o,a,t,e,Y,Z){return n(),s("div",null,[l,c,p,u,i,r,k,d,g,m,h,M,b,f,B,D,v,S,w,y,N,j,O,T,I,J,K,P,_,C,L,Q,x,U,A,q,z,E,F,G,H,R,V,W,X])};export{t as __pageData,e as default};
